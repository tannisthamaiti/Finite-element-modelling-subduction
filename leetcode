import java.util.HashMap;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap <Integer, Integer> map = new HashMap<Integer, Integer>();
        int n = nums.length; 
        int res;
        for (int i = 0; i < n; i++) {
            res = target - nums[i];
            //if we already have the complement in HashMap,
            //return an array that contains indices of them.  
            if (map.containsKey(res)) {
                return new int[] {i, map.get(res)};
            }
            //if its complement is not in HashMap but in the array,
            //they will be matched when the complement is 
            //regarded as current element.
            //add current element into HashMap.
            map.put(nums[i], i);
            
    }
        //Exception which says it is unavailable to find solution
        //with these arguments.
        throw new IllegalArgumentException("No solution");

    }
}
_______________________________________________________________________________
class Solution {
    public int reverse(int x) {
        int rem = 0;
        int rev_number = 0 ;
        // handling negative numbers
        boolean negativeFlag = false; 
        if (x<0){
            negativeFlag = true;
            x = -x;
        }
        while (x !=0){
            int curr_digit = x%10;
            rev_number = (rev_number*10) + curr_digit;
            // checking if the reverse overflowed or not. 
            // The values of (rev_num - curr_digit)/10 and 
            // prev_rev_num must be same if there was no 
            // problem. 
            if ((rev_number - curr_digit)/10 != rem) 
            { 
                System.out.println("WARNING OVERFLOWED!!!"); 
                return 0; 
            } 
            rem = rev_number; 
            x = x/10; 
        }
        return (negativeFlag == true)? -rev_number : rev_number;        
         
    }
}
